#docker-compose.yml
version: '3.8'

services:
  # Frontend Service
  frontend:
    env_file:
     - .env  
    build:
      context: ./services/othor-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./services/othor-frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_MAX_DATA_SOURCES=${NEXT_PUBLIC_MAX_DATA_SOURCES:-}
      - NEXT_PUBLIC_TEAM_MEMBERS=${NEXT_PUBLIC_TEAM_MEMBERS:-}
      - NEXT_PUBLIC_CHATBOT_LIMIT_PER_HOUR=${NEXT_PUBLIC_CHATBOT_LIMIT_PER_HOUR:-}
      - NEXT_PUBLIC_MAX_WORKSPACES=${NEXT_PUBLIC_MAX_WORKSPACES:-}
      - NEXT_PUBLIC_WORKSPACE_RATE_LIMIT=${NEXT_PUBLIC_WORKSPACE_RATE_LIMIT:-}
      - NEXT_PUBLIC_DATA_SOURCE_RATE_LIMIT=${NEXT_PUBLIC_DATA_SOURCE_RATE_LIMIT:-}
    depends_on:
      - organizations
      - metrics
      - auth
      - narrative
      - chatbot
      - backend-vpn-connector 
    networks:
      - vpn-network
      - default
  
  # VPN Connector Service
  backend-vpn-connector:
    container_name: backend-vpn-connector
    build:
      context: ./services/backend-vpn-connector
      dockerfile: Dockerfile.dev
    ports:
      - "8007:8007"
    volumes:
      - ./services/backend-vpn-connector:/app
      - vpn-configs:/etc/openvpn/configs
      - vpn-auth:/etc/openvpn/auth
    cap_add:
      - NET_ADMIN
      - NET_RAW
    privileged: true
    devices:
      - /dev/net/tun:/dev/net/tun
      - /dev/ppp:/dev/ppp
    sysctls:
      - net.ipv4.ip_forward=1
    networks:
      - vpn-network
      - default
    environment:
      - DB_HOST=172.20.38.116
      - DB_PORT=30115
      - DB_NAME=BHP
      - DB_USER=SAPABAP1
      - DB_PASSWORD=Bplm1234
      - DB_SCHEMA=SAPABAP1
      - DB_SSLMODE=disable
      - JWT_SECRET=${SECRET_KEY}
      - JWT_ALGORITHM=${ALGORITHM}
      - AWS_REGION=${AWS_REGION}
      - AWS_SECRET_PREFIX=${AWS_SECRET_PREFIX}
      - AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - VPN_NETWORK=10.8.0.0/24
      - PORT=8007
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # Organization Service
  organizations:
    env_file:
     - .env  
    build:
      context: ./services/backend-organizations
      dockerfile: Dockerfile.dev
    ports:
      - "8005:8000"
    volumes:
      - ./services/backend-organizations:/app
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${SECRET_KEY}
    depends_on:
      - postgres

  # Metrics Service
  metrics:
    env_file:
     - .env
    build:
      context: ./services/backend-metrics
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/backend-metrics:/app
    network_mode: "service:backend-vpn-connector"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${SECRET_KEY}
    depends_on:
      - postgres

  # Metric Discovery Service
  metric-discovery:
    env_file:
     - .env  
    build:
      context: ./services/backend-metric-discovery
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8000"
    volumes:
      - ./services/backend-metric-discovery:/app
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - JWT_SECRET=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # Auth Service
  auth:
    env_file:
     - .env  
    build:
      context: ./services/backend-auth
      dockerfile: Dockerfile.dev
    ports:
      - "8004:8000"
    volumes:
      - ./services/backend-auth:/app
    networks:
      - vpn-network
      - default
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - JWT_SECRET=${SECRET_KEY}
      - JWT_ALGORITHM=${ALGORITHM}
      - SENDER_NAME=${APP_NAME}
      - FRONTEND_URL=${FRONTEND_URL}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_VERIFICATION_TIMEOUT=${EMAIL_VERIFICATION_TIMEOUT}
      - MAILCHIMP_API_KEY=${MAILCHIMP_API_KEY}
      - MAILCHIMP_LIST_ID=${MAILCHIMP_LIST_ID}
      - MAILCHIMP_SERVER=${MAILCHIMP_SERVER}
      - NARRATIVE_SERVICE_URL=http://backend-vpn-connector:8001
      - DATA_SOURCE_SERVICE_URL=http://backend-vpn-connector:8001
      - ORGANIZATIONS_SERVICE_URL=http://organizations:8000
      - METRICS_SERVICE_URL=http://backend-vpn-connector:8002
      - VPN_CONNECTOR_SERVICE_URL=http://backend-vpn-connector:8007
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # Narrative Service
  narrative:
    container_name: narrative
    env_file:
      - .env 
    build:
      context: ./services/backend-narrative-and-datasource
      dockerfile: Dockerfile.dev
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    volumes:
      - ./services/backend-narrative-and-datasource:/app
      - vpn-auth:/etc/openvpn/auth
    depends_on:
      backend-vpn-connector:
        condition: service_healthy
    network_mode: "service:backend-vpn-connector"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PORT=${DB_PORT:-5432}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - JWT_SECRET=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HDB_USE_SOURCE_IP=10.81.234.2

  # Chatbot Service
  chatbot:
    env_file:
     - .env  
    build:
      context: ./services/backend-chatbot
      dockerfile: Dockerfile.dev
    ports:
      - "8006:8000"
    volumes:
      - ./services/backend-chatbot:/app
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_SSLMODE=disable
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - JWT_SECRET=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres

  # Database Service
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    env_file:
     - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=othor_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Initializer Service
  # db-init:
  #   env_file:
  #    - .env
  #   build:
  #     context: ./init-scripts
  #     dockerfile: Dockerfile
  #   environment:
  #     - POSTGRES_USER=${DB_USER:-postgres}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_DB=${DB_NAME:-othor_db}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - JWT_SECRET=${SECRET_KEY}
  #   volumes:
  #     - ./init-scripts/sample-data:/sample-data:ro
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     auth:
  #       condition: service_started
  #   restart: on-failure:3

  # Redis for caching
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - vpn-auth:/etc/openvpn/auth
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    depends_on:
      - frontend
      - organizations
      - metrics
      - auth
      - narrative
      - chatbot
    networks:
      - vpn-network
      - default

networks:
  vpn-network:
    driver: bridge
  default:
    driver: bridge

volumes:
  postgres_data:  
  redis_data:
  vpn-configs:
  vpn-auth: